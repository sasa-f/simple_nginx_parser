#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
module SimpleNginxParser
  class NgxParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 28)
IF = 'if'
def parse(tokens)
  @q = tokens
  config = do_parse
  config
end

def next_token
  @q.shift
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     7,     7,     9,     8,     8,    14,    13,    15,    16,    14,
    13,    15,    16,     7,    17,    18,     8,    19,    22 ]

racc_action_check = [
     0,     2,     1,     0,     2,     6,     6,     6,     6,    12,
    12,    12,    12,    19,     9,    11,    19,    11,    21 ]

racc_action_pointer = [
    -3,     2,    -2,   nil,   nil,   nil,    -1,   nil,   nil,    14,
   nil,    13,     3,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,    13,   nil ]

racc_action_default = [
   -16,   -16,    -2,    -3,    -4,    -5,   -11,    -7,    -9,   -16,
    -1,   -16,   -11,   -12,   -13,   -14,   -15,    23,    -6,   -16,
   -10,   -16,    -8 ]

racc_goto_table = [
     1,    11,    10,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21 ]

racc_goto_check = [
     1,     7,     1,   nil,   nil,   nil,   nil,     7,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,   nil,   nil,   nil,    -5,   nil ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,     6,   nil,    12 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 11, :_reduce_1,
  1, 11, :_reduce_2,
  1, 12, :_reduce_3,
  1, 12, :_reduce_4,
  1, 12, :_reduce_5,
  3, 13, :_reduce_6,
  1, 14, :_reduce_7,
  5, 15, :_reduce_8,
  1, 16, :_reduce_9,
  2, 17, :_reduce_10,
  0, 17, :_reduce_11,
  1, 18, :_reduce_12,
  1, 18, :_reduce_13,
  1, 18, :_reduce_14,
  1, 18, :_reduce_15 ]

racc_reduce_n = 16

racc_shift_n = 23

racc_token_table = {
  false => 0,
  :error => 1,
  :SEMICOLON => 2,
  :COMMENT => 3,
  :LBRACE => 4,
  :RBRACE => 5,
  :STRING => 6,
  :NUMBER => 7,
  :DOUBLE_QUOTED_STRING => 8,
  :SINGLE_QUOTED_STRING => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEMICOLON",
  "COMMENT",
  "LBRACE",
  "RBRACE",
  "STRING",
  "NUMBER",
  "DOUBLE_QUOTED_STRING",
  "SINGLE_QUOTED_STRING",
  "$start",
  "statements",
  "statement",
  "param",
  "comment",
  "block",
  "directive",
  "values",
  "value" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 3)
  def _reduce_1(val, _values, result)
     result = val[0].concat(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 6)
  def _reduce_3(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_4(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_5(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_6(val, _values, result)
     result = NgxParam.new(val[0],val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_7(val, _values, result)
     result = NgxComment.new(val[0].lstrip) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_8(val, _values, result)
    result = NgxBlock.new(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_10(val, _values, result)
     result = val.flatten
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_11(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_12(val, _values, result)
     result = val[0].to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class NgxParser
  end   # module SimpleNginxParser
